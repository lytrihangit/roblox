repeat task.wait() until game:IsLoaded()

--// Config
local SeedBuy = _G.seeds or {}
local PlantTrade = _G.plant or {}

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local VirtualUser = game:GetService("VirtualUser")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Backpack = LocalPlayer:WaitForChild("Backpack")

--// Remotes
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local Assets = ReplicatedStorage:WaitForChild("Assets")
local BuyItem = Remotes:WaitForChild("BuyItem")
local BuyPlatform = Remotes:WaitForChild("BuyPlatform")
local EquipBestBrainrots = Remotes:WaitForChild("EquipBestBrainrots")
local PlaceItem = Remotes:WaitForChild("PlaceItem")
local ItemSell = Remotes:WaitForChild("ItemSell")
local ConfirmSell = Remotes:WaitForChild("ConfirmSell")
local RemoveItem = Remotes:WaitForChild("RemoveItem")
local GiftItem = Remotes:WaitForChild("GiftItem")

--// PlayerData & Plot
local PlayerData = require(ReplicatedStorage:WaitForChild("PlayerData"))
local PlotOnwer
for _, v in pairs(workspace.Plots:GetChildren()) do
	if v:GetAttribute("Owner") == LocalPlayer.Name then
		PlotOnwer = v
		break
	end
end

--// Cache & Safe Network
local lastFetch, cacheResp = 0, {}

local function safeDecode(str)
	local ok, result = pcall(function() return HttpService:JSONDecode(str) end)
	return ok and result or {}
end

local function requestAPI(url)
	local req = (syn and syn.request) or request or (http and http.request) or http_request
	if not req then return {} end
	local res = req({Url = url, Method = "GET"})
	return safeDecode(tostring(res.Body))
end

local function requestSafe(url)
	if tick() - lastFetch < 60 and #cacheResp > 0 then return cacheResp end
	local ok, data = pcall(requestAPI, url)
	if ok and type(data) == "table" and #data > 0 then
		cacheResp, lastFetch = data, tick()
	end
	return cacheResp
end

--// Write Safe
local function writeData(req, text)
	local ok, err = pcall(function()
		writefile(LocalPlayer.Name .. ".json", HttpService:JSONEncode({Request = req, Text = text}))
	end)
	if not ok then warn("[writeData Error]:", err) end
end

--// Helper
local function isInList(target, list)
	for _, v in ipairs(list) do if v == target then return true end end
	return false
end

local function isOnline(name)
	for _, v in ipairs(Players:GetPlayers()) do
		if v.Name == name then return true end
	end
end

--// Farm Logic
local function buyPlatform()
	local Platforms = PlayerData:GetData().Data.Platforms
	local count = 0
	for _ in pairs(Platforms) do count += 1 end
	if count < 4 then BuyPlatform:FireServer(tostring(count + 1)) end
end

local function getPlants(row)
	local Planted = PlayerData:GetData().Data.Planted
	local result = {}
	for id, plant in pairs(Planted) do
		if plant.Row == row then
			table.insert(result, {Id = id, Plant = plant, Time = plant.Time or 0})
		end
	end
	return result
end

local function getRows()
	local rows = {}
	for _, r in pairs(PlotOnwer.Rows:GetChildren()) do
		local rowNum = tonumber(r.Name)
		local enabled = r:GetAttribute("Enabled")
		local plants = getPlants(rowNum)
		rows[rowNum] = {enabled = enabled, plants = #plants}
	end
	return rows
end

local function clearPlants()
	for k, v in pairs(getRows()) do
		if v.enabled and v.plants > 0 then
			for _, plant in ipairs(getPlants(k)) do
				if plant.Time == 0 then
					RemoveItem:FireServer(plant.Id)
					task.wait(0.4)
				end
			end
		end
	end
end

local function buySeeds()
	local stock = Assets:WaitForChild("Seeds")
	for _, seed in pairs(stock:GetChildren()) do
		local sName, sStock = seed.Name, seed:GetAttribute("Stock")
		if sStock > 0 and isInList(sName, SeedBuy) then
			for i = 1, sStock do
				BuyItem:FireServer(sName)
				task.wait(0.35)
			end
		end
	end
end

local function plantSeeds()
	local rows = getRows()
	for _, container in pairs({Backpack, Character}) do
		for _, v in pairs(container:GetChildren()) do
			local itemName = v:GetAttribute("ItemName")
			if itemName and isInList(itemName, SeedBuy) then
				local id, item = v:GetAttribute("ID"), v:GetAttribute("Plant")
				for row, r in pairs(rows) do
					if r.enabled and r.plants < 5 then
						local grassList = PlotOnwer.Rows[row].Grass:GetChildren()
						local floor = grassList[math.random(1, #grassList)]
						v.Parent = Character
						PlaceItem:FireServer({Item = item, CFrame = floor.CFrame, ID = id, Floor = floor})
						task.wait(0.5)
					end
				end
			end
		end
	end
end

local function checkInventory()
	local data = {}
	for _, container in pairs({Backpack, Character}) do
		for _, v in pairs(container:GetChildren()) do
			if isInList(v:GetAttribute("IsPlant"), PlantTrade) then
				table.insert(data, v)
			end
		end
	end
	return data
end

local function autoTrade()
	local ok, err = pcall(function()
		local receivers = requestSafe("https://raw.phuocbadlion.com/68f092e375d8f/raw")
		local inv = checkInventory()
		if #inv == 0 or #receivers == 0 then return end
		for _, name in ipairs(receivers) do
			if isOnline(name) then
				for _, plant in ipairs(inv) do
					if plant and plant.Parent then
						GiftItem:FireServer({{Item = plant, ToGift = name}})
						task.wait(2.5)
					end
				end
			end
		end
	end)
	if not ok then warn("[autoTrade Error]:", err) end
end

--// Idle Prevent
LocalPlayer.Idled:Connect(function()
	VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
end)

--// Auto Sell Loop
task.spawn(function()
	ConfirmSell.OnClientEvent:Connect(function(_, pu, py)
		ItemSell:FireServer(pu, py, true)
	end)

	while task.wait(5) do
		buyPlatform()
		EquipBestBrainrots:FireServer()
		task.wait(0.3)
		ItemSell:FireServer()
	end
end)

--// Main Farm Loop
task.spawn(function()
	while task.wait(5) do
		writeData("", "Farming...")
		autoTrade()
		clearPlants()
		buySeeds()
		plantSeeds()
	end
end)
