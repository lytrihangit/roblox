repeat wait() until game:IsLoaded()
-- Config
local ApiURL = _G.apiurl
local SeedBuy = _G.seeds
-- Players
local Players = game:GetService('Players')
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Backpack = LocalPlayer:WaitForChild('Backpack')
local Humanoid = Character:WaitForChild("Humanoid")
-- Remotes
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local Assets = ReplicatedStorage:WaitForChild("Assets")
local BuyItem = Remotes:WaitForChild("BuyItem")
local BuyPlatform = Remotes:WaitForChild("BuyPlatform")
local EquipBestBrainrots = Remotes:WaitForChild("EquipBestBrainrots")
local PlaceItem = Remotes:WaitForChild("PlaceItem")
local ItemSell = Remotes:WaitForChild("ItemSell")
local ConfirmSell = Remotes:WaitForChild("ConfirmSell")
local FavoriteItem = Remotes:WaitForChild("FavoriteItem")
local BuyRow = Remotes:WaitForChild("BuyRow")
local RemoveItem = Remotes:WaitForChild("RemoveItem")
local SpawnTutorialBrainrot = Remotes:WaitForChild("SpawnTutorialBrainrot")
local FinishTutorial = Remotes:WaitForChild("FinishTutorial")
local GiftItem = Remotes:WaitForChild("GiftItem")

-- Options
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local VirtualUser = game:GetService('VirtualUser')

-- Player Data
local PlayerData = require(ReplicatedStorage:WaitForChild("PlayerData"))
local PlotAsync = require(ReplicatedStorage.Modules.Utility.Util):GetPlotAsync(LocalPlayer)
local General = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Library"):WaitForChild("General"))

local function getOwnerPlot()
    for _, v in pairs(workspace.Plots:GetChildren()) do
        if v:GetAttribute("Owner") == LocalPlayer.Name then
            return v
        end
    end
end
local PlotOnwer = getOwnerPlot()

-- function
local lastFetch = 0
local cacheResp = {}

local function requestAPI(Url)
    local req = (syn and syn.request) or request or (http and http.request) or http_request
    local res = req({
        Url = Url,
        Method = "GET"
    })
 
    return HttpService:JSONDecode(tostring(res.Body)) or cacheResp
end

local function requestSafe(url)
    if os.clock() - lastFetch < 180 and next(cacheResp) ~= nil then
        return cacheResp
    end

    local success, data = pcall(function()
        return requestAPI(url)
    end)

    if success and type(data) == "table" and next(data) ~= nil then
        cacheResp = data
        lastFetch = os.clock()
    end

    return cacheResp
end

local function writeData(request, text)
	writefile(LocalPlayer.Name .. ".json", HttpService:JSONEncode({ Request = request, Text = text }))
end

local function isInList(target, list)
	for _, v in ipairs(list) do
		if v == target then return true end
	end
	return false
end

local function buyPlatform()
    local DataUser = PlayerData:GetData().Data
    local slotBuy = {}
    for k, _ in pairs(DataUser.Platforms) do
        table.insert(slotBuy, tonumber(k))
    end

    local slot = (#slotBuy + 1)
    if slot < 4 then
        BuyPlatform:FireServer(tostring(slot))
    end
end

local function getPlants(row)
    local DataUser = PlayerData:GetData().Data
    local Planted = DataUser.Planted
    local result = {}

    for id, plant in pairs(Planted) do
        if plant.Row == row then
            local time = (plant.Time) or 0
            table.insert(result, {Id = id, Plant = plant, Time = time})
        end
    end

    return result
end

local function getRows()
    local result = {}

    for _, v in pairs(PlotOnwer.Rows:GetChildren()) do
        local enabled = v:GetAttribute('Enabled') or false
        
        local row = tonumber(v.Name)
        local plants = getPlants(row) 

        result[row] = { enabled = enabled, plants = #plants }
    end

    return result
end

local function clearPlants()
    local rows = getRows()
    
    for k, v in pairs(rows) do
        if v.enabled and v.plants > 0 then
            local plants = getPlants(k)
            
            for _, v in ipairs(plants) do
                if v.Time == 0 then
                    RemoveItem:FireServer(v.Id)

                    task.wait(0.5)
                end
            end
        end
    end
end

local function buySeeds()
    local seedStock = Assets:WaitForChild("Seeds")
    local listSeed = {}
    local countBuy = 0
    for _, seed in pairs(seedStock:GetChildren()) do
        local stock = seed:GetAttribute("Stock")
        if isInList(seed.Name, SeedBuy) and stock > 0 then
            listSeed[seed.Name] = stock
            countBuy += 1
        end
    end

    for k, v in pairs(listSeed) do
        for i = 1, v do
            BuyItem:FireServer(k)

            task.wait(0.5)
        end
    end

    return countBuy
end

local function plantSeeds()
    for _, c in pairs({Backpack, Character}) do
        for _, v in pairs(c:GetChildren()) do
            local itemName = v:GetAttribute("ItemName")
            if isInList(itemName, SeedBuy) then
                local id = v:GetAttribute("ID")
                local item = v:GetAttribute("Plant")

                local rows = getRows()
                local p = v

                for k, v in pairs(rows) do
                    if not v.enabled then
                        continue
                    end
                    
                    if v.plants < 5 then
                        local grass = PlotOnwer.Rows[k].Grass:GetChildren()
                        local randomGrass = grass[math.random(1, #grass)]
                        
                        p.Parent = Character

                        PlaceItem:FireServer({
                            ["Item"] = item,
                            ["CFrame"] = randomGrass.CFrame,
                            ["ID"] = id,
                            ["Floor"] = randomGrass
                        })
                    end

                    task.wait(1)
                end
            end
        end
    end
end

local function isOnline(name)
    for _, v in ipairs(Players:GetPlayers()) do
        if v.Name == name then
            return true
        end
    end
    return false
end

local function checkInventory(plantTrade)
    local data = {}
    for _, c in pairs({Backpack, Character}) do
        for _, v in pairs(c:GetChildren()) do
            local IsPlant = v:GetAttribute("IsPlant")
            if IsPlant == plantTrade then
                table.insert(data, v)
            end
        end
    end
    return data
end

local function autoTrade()
    local success, err = pcall(function()
        local resp = requestSafe(ApiURL)

        for plantReceive, userReceive in pairs(resp) do
            local inv = checkInventory(plantReceive)

            if #inv > 0 then
                for _, u in pairs(userReceive) do
                    if isOnline(u) then
                        for _, pl in pairs(inv) do
                            if pl and pl.Parent then
                                pl.Parent = Character

                                GiftItem:FireServer({
                                    ["Item"] = pl,
                                    ["ToGift"] = u
                                })
                            end
                            task.wait(5)
                        end
                    end
                end
            end
        end
    end)

    if not success then
        writeData("", "[autoTrade] : " .. err)
    end
end
-- end function

LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

task.spawn(function() 
    ConfirmSell.OnClientEvent:Connect(function (p, pu, py) 
        ItemSell:FireServer(pu, py, true)
    end)

    while true do
        buyPlatform()
        EquipBestBrainrots:FireServer()
        task.wait(0.5)
		ItemSell:FireServer()
        task.wait(5)
    end
end)

task.spawn(function() 
    while true do
        local success, err = pcall(function() 
            writeData("", "Farming...")

            autoTrade()
            clearPlants()
            local count = buySeeds()
            if count > 0 then
                plantSeeds()
                writeData("RunAgain", "Change Account")
                break
            end
        end)
        
        if not success then
            writeData("", err)
        end

        task.wait(5)
    end
end)
